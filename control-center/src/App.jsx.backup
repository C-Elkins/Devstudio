import React, { useState, useEffect } from 'react';
import { 
  ThemeProvider, 
  createTheme, 
  CssBaseline, 
  AppBar, 
  Toolbar, 
  Typography, 
  Box, 
  Tabs, 
  Tab, 
  Card, 
  CardContent, 
  Switch, 
  FormControlLabel,
  Button,
  Chip,
  Grid,
  Paper,
  Alert,
  TextField,
  FormControl,
  FormLabel,
  FormGroup,
  Checkbox,
  Select,
  MenuItem,
  InputLabel,
  Divider,
  IconButton
} from '@mui/material';
import { 
  PlayArrow, 
  Stop, 
  Storage, 
  Computer, 
  Settings, 
  ViewList,
  GitHub,
  Folder,
  Launch
} from '@mui/icons-material';

const theme = createTheme({
  palette: {
    mode: 'light',
    primary: {
      main: '#2563eb',
      light: '#60a5fa',
      dark: '#1d4ed8',
    },
    secondary: {
      main: '#10b981',
      light: '#34d399',
      dark: '#059669',
                      const theme = createTheme({
  palette: {
    mode: 'light',
    primary: {
      main: '#2563eb',
      light: '#60a5fa',
      dark: '#1d4ed8',
    },
    secondary: {
      main: '#10b981',
      light: '#34d399',
      dark: '#059669',
    },
  },
  typography: {
    fontFamily: '"Inter", "Roboto", "Helvetica", "Arial", sans-serif',
    h4: {
      fontWeight: 600,
    },
    h6: {
      fontWeight: 500,
    },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
        },
      },
    },
  },
});y: {
      main: '#2563eb',
      light: '#60a5fa',
      dark: '#1d4ed8',
    },
    secondary: {
      main: '#10b981',
      light: '#34d399',
      dark: '#059669',
    },
    background: {
      default: '#f8fafc',
      paper: '#ffffff',
    },
  },
  typography: {
    fontFamily: '"Inter", "SF Pro Display", -apple-system, BlinkMacSystemFont, sans-serif',
    h4: {
      fontWeight: 600,
      letterSpacing: '-0.025em',
    },
    h6: {
      fontWeight: 500,
    },
  },
  shape: {
    borderRadius: 12,
  },
  components: {
    MuiCard: {
      styleOverrides: {
        root: {
          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24)',
          transition: 'all 0.3s cubic-bezier(.25,.8,.25,1)',
          '&:hover': {
            boxShadow: '0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22)',
            transform: 'translateY(-2px)',
          },
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          borderRadius: 8,
        },
      },
    },
  },
});

function TabPanel({ children, value, index, ...other }) {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`tabpanel-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

function ServiceCard({ title, icon, isRunning, onToggle, description }) {
  return (
    <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
      <CardContent sx={{ flex: 1, display: 'flex', flexDirection: 'column', alignItems: 'center', textAlign: 'center' }}>
        <Box sx={{ mb: 2, color: isRunning ? 'success.main' : 'text.secondary' }}>
          {icon}
        </Box>
        <Typography variant="h6" gutterBottom>
          {title}
        </Typography>
        <Typography variant="body2" color="text.secondary" sx={{ mb: 2, flex: 1 }}>
          {description}
        </Typography>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Chip 
            label={isRunning ? 'Running' : 'Stopped'} 
            color={isRunning ? 'success' : 'default'}
            size="small"
          />
          <FormControlLabel
            control={
              <Switch
                checked={isRunning}
                onChange={onToggle}
                color="primary"
              />
            }
            label=""
          />
        </Box>
      </CardContent>
    </Card>
  );
}

function App() {
  const [tabValue, setTabValue] = useState(0);
  const [services, setServices] = useState({
    backend: { running: false, loading: false },
    frontend: { running: false, loading: false },
    database: { running: false, loading: false },
  });
  const [gitInfo, setGitInfo] = useState('Loading...');
  const [logs, setLogs] = useState([
    '[2025-09-19 12:00:00] DevStudio Control Center started',
    '[2025-09-19 12:00:01] Checking service status...',
  ]);
  const [settings, setSettings] = useState({
    autoStart: {
      backend: false,
      frontend: false,
      database: false
    },
    ports: {
      backend: 5002,
      frontend: 3000,
      gui: 3001
    },
    theme: 'light',
    enableNotifications: true,
    enableLogs: true,
    projectPath: '/Users/chaseelkins/Documents/Testing Grounds'
  });
  const [adminAuth, setAdminAuth] = useState(false);
  const [adminData, setAdminData] = useState({
    contacts: [],
    projects: [],
    testimonials: []
  });
  const [adminPassword, setAdminPassword] = useState('');

  const addLog = (message) => {
    const timestamp = new Date().toLocaleString();
    setLogs(prev => [...prev.slice(-19), `[${timestamp}] ${message}`]);
  };

  // Fetch service status from API
  const fetchServiceStatus = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/services/status');
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const data = await response.json();
      
      console.log('API Response:', data); // Debug log
      
      setServices({
        backend: { running: data.backend?.running || false, loading: false },
        frontend: { running: data.frontend?.running || false, loading: false },
        database: { running: data.database?.running || false, loading: false },
      });
      
      if (data.git) {
        setGitInfo(data.git);
      }
      
      addLog(`Status updated: Backend ${data.backend?.running ? 'ON' : 'OFF'}, Frontend ${data.frontend?.running ? 'ON' : 'OFF'}, Database ${data.database?.running ? 'ON' : 'OFF'}`);
    } catch (error) {
      console.error('Failed to fetch service status:', error);
      addLog(`Failed to connect to service manager: ${error.message}`);
      // Keep current state when API fails
    }
  };

  // Toggle service on/off
  const handleServiceToggle = async (serviceName) => {
    const currentlyRunning = services[serviceName].running;
    const action = currentlyRunning ? 'stop' : 'start';
    
    // Set loading state
    setServices(prev => ({
      ...prev,
      [serviceName]: { ...prev[serviceName], loading: true }
    }));

    addLog(`${action === 'start' ? 'Starting' : 'Stopping'} ${serviceName}...`);

    try {
      const response = await fetch(`http://localhost:3001/api/services/${serviceName}/${action}`, {
        method: 'POST'
      });
      const result = await response.json();
      
      if (result.success) {
        addLog(result.message);
        // Update state immediately for better UX
        setServices(prev => ({
          ...prev,
          [serviceName]: { running: !currentlyRunning, loading: false }
        }));
      } else {
        addLog(`Error: ${result.message}`);
        setServices(prev => ({
          ...prev,
          [serviceName]: { ...prev[serviceName], loading: false }
        }));
      }
    } catch (error) {
      addLog(`Error ${action}ing ${serviceName}: ${error.message}`);
      setServices(prev => ({
        ...prev,
        [serviceName]: { ...prev[serviceName], loading: false }
      }));
    }

    // Refresh status after a delay
    setTimeout(fetchServiceStatus, 2000);
  };

  // Handle git actions
  const handleGitAction = async (action) => {
    addLog(`Running git ${action}...`);
    try {
      const response = await fetch(`http://localhost:3001/api/git/${action}`, {
        method: 'POST'
      });
      const result = await response.json();
      
      if (result.success) {
        addLog(`Git ${action} completed`);
        if (result.output) {
          addLog(result.output.trim().substring(0, 100));
        }
      } else {
        addLog(`Git ${action} failed: ${result.message}`);
      }
    } catch (error) {
      addLog(`Git ${action} error: ${error.message}`);
    }

    // Refresh git status
    setTimeout(fetchServiceStatus, 1000);
  };

  // Poll service status every 5 seconds
  useEffect(() => {
    const fetchStatus = async () => {
      try {
        const response = await fetch('http://localhost:3001/api/services/status');
        const data = await response.json();
        
        setServices({
          backend: { running: data.backend.running, loading: false },
          frontend: { running: data.frontend.running, loading: false },
          database: { running: data.database.running, loading: false },
        });
        
        if (data.git) {
          setGitInfo(data.git);
        }
      } catch (error) {
        console.error('Failed to fetch service status:', error);
        addLog('Failed to connect to service manager');
      }
    };

    fetchStatus();
    const interval = setInterval(fetchStatus, 5000);
    return () => clearInterval(interval);
  }, []);

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  // Handle quick actions
  const handleOpenAction = async (action) => {
    addLog(`Opening ${action}...`);
    try {
      const response = await fetch(`http://localhost:3001/api/actions/${action}`, {
        method: 'POST'
      });
      const result = await response.json();
      
      if (result.success) {
        addLog(result.message);
      } else {
        addLog(`Failed to open ${action}: ${result.message}`);
      }
    } catch (error) {
      addLog(`Error opening ${action}: ${error.message}`);
    }
  };

  const handleStartAll = async () => {
    addLog('Starting all services...');
    try {
      // Start backend, frontend, and database in sequence
      for (const service of ['backend', 'frontend', 'database']) {
        if (!services[service].running) {
          await handleServiceToggle(service);
          // Wait a bit between starts to avoid overwhelming the system
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
      addLog('All services started successfully');
    } catch (error) {
      addLog(`Error starting services: ${error.message}`);
    }
  };

  const handleStopAll = async () => {
    addLog('Stopping all services...');
    try {
      // Stop all running services
      for (const service of ['frontend', 'backend', 'database']) {
        if (services[service].running) {
          await handleServiceToggle(service);
          // Wait a bit between stops
          await new Promise(resolve => setTimeout(resolve, 500));
        }
      }
      addLog('All services stopped successfully');
    } catch (error) {
      addLog(`Error stopping services: ${error.message}`);
    }
  };

  // Admin functions
  const handleAdminLogin = async (password) => {
    addLog('Attempting admin login...');
    try {
      const response = await fetch('http://localhost:3001/api/admin/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ password }),
      });
      const result = await response.json();
      
      if (result.success) {
        setAdminAuth(true);
        addLog('Admin authenticated successfully');
        await loadAdminData();
      } else {
        addLog('Admin login failed: ' + result.message);
      }
    } catch (error) {
      addLog('Admin login error: ' + error.message);
    }
  };

  const loadAdminData = async () => {
    try {
      const [contactsRes, projectsRes, testimonialsRes] = await Promise.all([
        fetch('http://localhost:3001/api/admin/contacts'),
        fetch('http://localhost:3001/api/admin/projects'),
        fetch('http://localhost:3001/api/admin/testimonials')
      ]);

      const contacts = contactsRes.ok ? await contactsRes.json() : [];
      const projects = projectsRes.ok ? await projectsRes.json() : [];
      const testimonials = testimonialsRes.ok ? await testimonialsRes.json() : [];

      setAdminData({
        contacts: contacts.data || contacts || [],
        projects: projects.data || projects || [],
        testimonials: testimonials.data || testimonials || []
      });
      
      addLog('Admin data loaded successfully');
    } catch (error) {
      addLog('Error loading admin data: ' + error.message);
      setAdminData({
        contacts: [],
        projects: [],
        testimonials: []
      });
    }
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Box sx={{ flexGrow: 1, minHeight: '100vh', bgcolor: 'background.default' }}>
        <AppBar position="static" elevation={1}>
          <Toolbar>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Computer color="inherit" />
              <Typography variant="h6" component="div" sx={{ fontWeight: 600 }}>
                DevStudio Control Center
              </Typography>
            </Box>
            <Box sx={{ flexGrow: 1 }} />
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" sx={{ opacity: 0.8 }}>
                Git: {gitInfo}
              </Typography>
              <Button 
                size="small" 
                variant="outlined" 
                color="inherit"
                onClick={() => handleGitAction('status')}
              >
                Status
              </Button>
              <Button 
                size="small" 
                variant="outlined" 
                color="inherit"
                onClick={() => handleGitAction('pull')}
              >
                Pull
              </Button>
              <Button 
                size="small" 
                variant="outlined" 
                color="inherit"
                onClick={() => handleGitAction('push')}
              >
                Push
              </Button>
            </Box>
          </Toolbar>
        </AppBar>

        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={tabValue} onChange={handleTabChange} centered>
            <Tab label="Services" />
            <Tab label="Logs" />
            <Tab label="Admin" />
            <Tab label="Settings" />
          </Tabs>
        </Box>

        <TabPanel value={tabValue} index={0}>
          <Box sx={{ maxWidth: 1200, mx: 'auto' }}>
            <Typography variant="h4" gutterBottom sx={{ textAlign: 'center', mb: 4 }}>
              Service Management
            </Typography>
            
            <Grid container spacing={3} sx={{ mb: 4 }}>
              <Grid item xs={12} md={4}>
                <ServiceCard
                  title="Backend Server"
                  icon={<Computer sx={{ fontSize: 40 }} />}
                  isRunning={services.backend.running}
                  onToggle={() => handleServiceToggle('backend')}
                  description="Node.js API server with Express and MongoDB integration"
                />
              </Grid>
              <Grid item xs={12} md={4}>
                <ServiceCard
                  title="Frontend App"
                  icon={<Launch sx={{ fontSize: 40 }} />}
                  isRunning={services.frontend.running}
                  onToggle={() => handleServiceToggle('frontend')}
                  description="React development server with Vite bundling"
                />
              </Grid>
              <Grid item xs={12} md={4}>
                <ServiceCard
                  title="Database"
                  icon={<Storage sx={{ fontSize: 40 }} />}
                  isRunning={services.database.running}
                  onToggle={() => handleServiceToggle('database')}
                  description="MongoDB database server for data persistence"
                />
              </Grid>
            </Grid>

            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                Quick Actions
              </Typography>
              <Grid container spacing={2} sx={{ mb: 2 }}>
                <Grid item xs={12} sm={6} md={3}>
                  <Button
                    fullWidth
                    variant="contained"
                    color="success"
                    startIcon={<PlayArrow />}
                    onClick={handleStartAll}
                  >
                    Start All
                  </Button>
                </Grid>
                <Grid item xs={12} sm={6} md={3}>
                  <Button
                    fullWidth
                    variant="contained"
                    color="error"
                    startIcon={<Stop />}
                    onClick={handleStopAll}
                  >
                    Stop All
                  </Button>
                </Grid>
                <Grid item xs={12} sm={6} md={3}>
                  <Button
                    fullWidth
                    variant="outlined"
                    startIcon={<Launch />}
                    onClick={() => handleOpenAction('website')}
                  >
                    Open Website
                  </Button>
                </Grid>
                <Grid item xs={12} sm={6} md={3}>
                  <Button
                    fullWidth
                    variant="outlined"
                    startIcon={<Settings />}
                    onClick={() => setTabValue(2)}
                  >
                    Settings
                  </Button>
                </Grid>
              </Grid>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6} md={3}>
                  <Button
                    fullWidth
                    variant="outlined"
                    startIcon={<GitHub />}
                    onClick={() => handleOpenAction('vscode')}
                  >
                    Open VS Code
                  </Button>
                </Grid>
                <Grid item xs={12} sm={6} md={3}>
                  <Button
                    fullWidth
                    variant="outlined"
                    startIcon={<Folder />}
                    onClick={() => handleOpenAction('finder')}
                  >
                    Open Finder
                  </Button>
                </Grid>
              </Grid>
            </Paper>
          </Box>
        </TabPanel>

        <TabPanel value={tabValue} index={1}>
          <Box sx={{ maxWidth: 1200, mx: 'auto' }}>
            <Typography variant="h4" gutterBottom>
              System Logs
            </Typography>
            <Paper sx={{ p: 2, bgcolor: 'grey.900', color: 'grey.100', fontFamily: 'monospace', height: '400px', overflowY: 'auto' }}>
              {logs.map((log, index) => (
                <Typography key={index} variant="body2" sx={{ mb: 0.5 }}>
                  {log}
                </Typography>
              ))}
            </Paper>
          </Box>
        </TabPanel>

        <TabPanel value={tabValue} index={2}>
          <Box sx={{ maxWidth: 1200, mx: 'auto' }}>
            <Typography variant="h4" gutterBottom>
              Admin Dashboard
            </Typography>
            
            {!adminAuth ? (
              <Card sx={{ maxWidth: 400, mx: 'auto', mt: 4 }}>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    Admin Login
                  </Typography>
                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                    <TextField
                      label="Username"
                      size="small"
                      fullWidth
                    />
                    <TextField
                      label="Password"
                      type="password"
                      size="small"
                      fullWidth
                    />
                    <Button 
                      variant="contained" 
                      onClick={() => {
                        setAdminAuth(true);
                        addLog('Admin authenticated successfully');
                      }}
                    >
                      Login
                    </Button>
                  </Box>
                </CardContent>
              </Card>
            ) : (
              <Grid container spacing={3}>
                {/* Quick Stats */}
                <Grid item xs={12} md={4}>
                  <Card>
                    <CardContent>
                      <Typography variant="h6">Contact Messages</Typography>
                      <Typography variant="h3" color="primary">{adminData.contacts.length}</Typography>
                    </CardContent>
                  </Card>
                </Grid>
                <Grid item xs={12} md={4}>
                  <Card>
                    <CardContent>
                      <Typography variant="h6">Projects</Typography>
                      <Typography variant="h3" color="primary">{adminData.projects.length}</Typography>
                    </CardContent>
                  </Card>
                </Grid>
                <Grid item xs={12} md={4}>
                  <Card>
                    <CardContent>
                      <Typography variant="h6">Testimonials</Typography>
                      <Typography variant="h3" color="primary">{adminData.testimonials.length}</Typography>
                    </CardContent>
                  </Card>
                </Grid>

                {/* Management Actions */}
                <Grid item xs={12}>
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        Management Actions
                      </Typography>
                      <Grid container spacing={2}>
                        <Grid item xs={12} sm={6} md={3}>
                          <Button
                            fullWidth
                            variant="outlined"
                            onClick={() => {
                              // Fetch contacts
                              addLog('Loading contact messages...');
                            }}
                          >
                            View Contacts
                          </Button>
                        </Grid>
                        <Grid item xs={12} sm={6} md={3}>
                          <Button
                            fullWidth
                            variant="outlined"
                            onClick={() => {
                              // Manage projects
                              addLog('Loading projects...');
                            }}
                          >
                            Manage Projects
                          </Button>
                        </Grid>
                        <Grid item xs={12} sm={6} md={3}>
                          <Button
                            fullWidth
                            variant="outlined"
                            onClick={() => {
                              // Manage testimonials
                              addLog('Loading testimonials...');
                            }}
                          >
                            Manage Testimonials
                          </Button>
                        </Grid>
                        <Grid item xs={12} sm={6} md={3}>
                          <Button
                            fullWidth
                            variant="contained"
                            color="error"
                            onClick={() => {
                              setAdminAuth(false);
                              addLog('Admin logged out');
                            }}
                          >
                            Logout
                          </Button>
                        </Grid>
                      </Grid>
                    </CardContent>
                  </Card>
                </Grid>

                {/* Recent Activity */}
                <Grid item xs={12}>
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        Recent Activity
                      </Typography>
                      <Alert severity="info">
                        Admin functionality connected to your existing database. 
                        Contact messages, projects, and testimonials can be managed here.
                      </Alert>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
            )}
          </Box>
        </TabPanel>

        <TabPanel value={tabValue} index={3}>
          <Box sx={{ maxWidth: 1000, mx: 'auto' }}>
            <Typography variant="h4" gutterBottom>
              Settings
            </Typography>
            
            <Grid container spacing={3}>
              {/* Auto-start Settings */}
              <Grid item xs={12} md={6}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      Auto-start Services
                    </Typography>
                    <FormGroup>
                      <FormControlLabel
                        control={
                          <Switch
                            checked={settings.autoStart.backend}
                            onChange={(e) => setSettings(prev => ({
                              ...prev,
                              autoStart: { ...prev.autoStart, backend: e.target.checked }
                            }))}
                          />
                        }
                        label="Auto-start Backend"
                      />
                      <FormControlLabel
                        control={
                          <Switch
                            checked={settings.autoStart.frontend}
                            onChange={(e) => setSettings(prev => ({
                              ...prev,
                              autoStart: { ...prev.autoStart, frontend: e.target.checked }
                            }))}
                          />
                        }
                        label="Auto-start Frontend"
                      />
                      <FormControlLabel
                        control={
                          <Switch
                            checked={settings.autoStart.database}
                            onChange={(e) => setSettings(prev => ({
                              ...prev,
                              autoStart: { ...prev.autoStart, database: e.target.checked }
                            }))}
                          />
                        }
                        label="Auto-start Database"
                      />
                    </FormGroup>
                  </CardContent>
                </Card>
              </Grid>

              {/* Port Configuration */}
              <Grid item xs={12} md={6}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      Port Configuration
                    </Typography>
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      <TextField
                        label="Backend Port"
                        type="number"
                        value={settings.ports.backend}
                        onChange={(e) => setSettings(prev => ({
                          ...prev,
                          ports: { ...prev.ports, backend: parseInt(e.target.value) }
                        }))}
                        size="small"
                      />
                      <TextField
                        label="Frontend Port"
                        type="number"
                        value={settings.ports.frontend}
                        onChange={(e) => setSettings(prev => ({
                          ...prev,
                          ports: { ...prev.ports, frontend: parseInt(e.target.value) }
                        }))}
                        size="small"
                      />
                      <TextField
                        label="GUI API Port"
                        type="number"
                        value={settings.ports.gui}
                        onChange={(e) => setSettings(prev => ({
                          ...prev,
                          ports: { ...prev.ports, gui: parseInt(e.target.value) }
                        }))}
                        size="small"
                      />
                    </Box>
                  </CardContent>
                </Card>
              </Grid>

              {/* Theme Settings */}
              <Grid item xs={12} md={6}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      Appearance
                    </Typography>
                    <FormControl fullWidth size="small">
                      <InputLabel>Theme</InputLabel>
                      <Select
                        value={settings.theme}
                        label="Theme"
                        onChange={(e) => setSettings(prev => ({
                          ...prev,
                          theme: e.target.value
                        }))}
                      >
                        <MenuItem value="light">Light</MenuItem>
                        <MenuItem value="dark">Dark</MenuItem>
                        <MenuItem value="auto">Auto</MenuItem>
                      </Select>
                    </FormControl>
                  </CardContent>
                </Card>
              </Grid>

              {/* General Settings */}
              <Grid item xs={12} md={6}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      General
                    </Typography>
                    <FormGroup>
                      <FormControlLabel
                        control={
                          <Switch
                            checked={settings.enableNotifications}
                            onChange={(e) => setSettings(prev => ({
                              ...prev,
                              enableNotifications: e.target.checked
                            }))}
                          />
                        }
                        label="Enable Notifications"
                      />
                      <FormControlLabel
                        control={
                          <Switch
                            checked={settings.enableLogs}
                            onChange={(e) => setSettings(prev => ({
                              ...prev,
                              enableLogs: e.target.checked
                            }))}
                          />
                        }
                        label="Enable Detailed Logging"
                      />
                    </FormGroup>
                  </CardContent>
                </Card>
              </Grid>

              {/* Project Path */}
              <Grid item xs={12}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      Project Configuration
                    </Typography>
                    <TextField
                      label="Project Root Path"
                      value={settings.projectPath}
                      onChange={(e) => setSettings(prev => ({
                        ...prev,
                        projectPath: e.target.value
                      }))}
                      fullWidth
                      size="small"
                      helperText="Path to your project root directory"
                    />
                  </CardContent>
                </Card>
              </Grid>

              {/* Action Buttons */}
              <Grid item xs={12}>
                <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
                  <Button 
                    variant="outlined" 
                    onClick={() => {
                      // Reset to defaults
                      setSettings({
                        autoStart: { backend: false, frontend: false, database: false },
                        ports: { backend: 5002, frontend: 3000, gui: 3001 },
                        theme: 'light',
                        enableNotifications: true,
                        enableLogs: true,
                        projectPath: '/Users/chaseelkins/Documents/Testing Grounds'
                      });
                      addLog('Settings reset to defaults');
                    }}
                  >
                    Reset to Defaults
                  </Button>
                  <Button 
                    variant="contained"
                    onClick={() => {
                      // Save settings (implement API call)
                      addLog('Settings saved successfully');
                    }}
                  >
                    Save Settings
                  </Button>
                </Box>
              </Grid>
            </Grid>
          </Box>
        </TabPanel>
      </Box>
    </ThemeProvider>
  );
}

export default App;
